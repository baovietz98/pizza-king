require('dotenv').config();
const mongoose = require('mongoose');
const Cart = require('./src/models/Cart');
const { cleanupGuestCarts, cleanupInactiveGuestCarts, getGuestCartStats } = require('./src/utils/cartCleanup');

// K·∫øt n·ªëi database
mongoose.connect(process.env.MONGO_URI);

async function createTestGuestCarts() {
  try {
    console.log('üß™ T·∫°o test guest carts...\n');
    
    // T·∫°o cart c≈© (10 ng√†y tr∆∞·ªõc)
    const oldCart = new Cart({
      sessionId: 'test_old_session',
      items: [],
      createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000),
      updatedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000)
    });
    await oldCart.save();
    
    // T·∫°o cart kh√¥ng ho·∫°t ƒë·ªông (5 ng√†y kh√¥ng update)
    const inactiveCart = new Cart({
      sessionId: 'test_inactive_session',
      items: [{ type: 'product', name: 'Test Pizza', price: 100, quantity: 1 }],
      createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000),
      updatedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)
    });
    await inactiveCart.save();
    
    // T·∫°o cart m·ªõi (1 ng√†y tr∆∞·ªõc)
    const newCart = new Cart({
      sessionId: 'test_new_session',
      items: [{ type: 'product', name: 'Fresh Pizza', price: 150, quantity: 2 }],
      createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
      updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)
    });
    await newCart.save();
    
    console.log('‚úÖ ƒê√£ t·∫°o 3 test guest carts:');
    console.log('   - Cart c≈© (10 ng√†y): test_old_session');
    console.log('   - Cart kh√¥ng ho·∫°t ƒë·ªông (5 ng√†y kh√¥ng update): test_inactive_session');
    console.log('   - Cart m·ªõi (1 ng√†y): test_new_session\n');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o test carts:', error);
  }
}

async function testCleanup() {
  try {
    console.log('üßπ B·∫Øt ƒë·∫ßu test cleanup...\n');
    
    // Hi·ªÉn th·ªã th·ªëng k√™ tr∆∞·ªõc
    const statsBefore = await getGuestCartStats();
    console.log('üìä Th·ªëng k√™ tr∆∞·ªõc cleanup:');
    console.log(`   - T·ªïng guest carts: ${statsBefore.total}`);
    console.log(`   - Cart r·ªóng: ${statsBefore.empty}`);
    console.log(`   - Cart c≈© (>7 ng√†y): ${statsBefore.old}\n`);
    
    // Test cleanup carts c≈© (7 ng√†y)
    console.log('üß™ Test cleanup carts c≈© (7 ng√†y)...');
    const deletedOld = await cleanupGuestCarts(7, false);
    console.log(`   - ƒê√£ x√≥a: ${deletedOld} carts\n`);
    
    // Test cleanup carts kh√¥ng ho·∫°t ƒë·ªông (3 ng√†y)
    console.log('üß™ Test cleanup carts kh√¥ng ho·∫°t ƒë·ªông (3 ng√†y)...');
    const deletedInactive = await cleanupInactiveGuestCarts();
    console.log(`   - ƒê√£ x√≥a: ${deletedInactive} carts\n`);
    
    // Hi·ªÉn th·ªã th·ªëng k√™ sau
    const statsAfter = await getGuestCartStats();
    console.log('üìä Th·ªëng k√™ sau cleanup:');
    console.log(`   - T·ªïng guest carts: ${statsAfter.total}`);
    console.log(`   - Cart r·ªóng: ${statsAfter.empty}`);
    console.log(`   - Cart c≈© (>7 ng√†y): ${statsAfter.old}`);
    
    console.log(`\n‚úÖ Test ho√†n th√†nh! ƒê√£ x√≥a ${deletedOld + deletedInactive} carts`);
    
  } catch (error) {
    console.error('‚ùå L·ªói khi test cleanup:', error);
  }
}

async function runTest() {
  try {
    await createTestGuestCarts();
    await testCleanup();
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    mongoose.connection.close();
  }
}

// Ch·∫°y test
runTest(); 